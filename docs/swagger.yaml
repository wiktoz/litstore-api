basePath: /api/v1
definitions:
  models.Address:
    properties:
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      flat:
        type: string
      house:
        type: string
      id:
        type: string
      name:
        type: string
      order_index:
        type: integer
      phone:
        type: string
      post_code:
        type: string
      street:
        type: string
      surname:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Error:
    properties:
      message:
        type: string
    type: object
  models.Permission:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Role:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      addresses:
        items:
          $ref: '#/definitions/models.Address'
        type: array
      blocked:
        type: boolean
      confirmed:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      updated_at:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: E-commerce system API Docs
  title: Litstore WebAPI
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Fetches all users from DB
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Users
      tags:
      - user
  /users/id/{id}:
    delete:
      consumes:
      - application/json
      description: Finds user by ID and deletes
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Deletes user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get User by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get User by ID
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Finds user by ID and updates with values provided in body
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Updates user data
      tags:
      - user
  /users/me:
    get:
      consumes:
      - application/json
      description: Get Currently Logged User by JWT from Cookies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Self User
      tags:
      - user
  /users/search/{phrase}:
    get:
      consumes:
      - application/json
      description: Finds users by a search phrase
      parameters:
      - description: Search Phrase
        in: path
        name: phrase
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Users by Search
      tags:
      - user
swagger: "2.0"
